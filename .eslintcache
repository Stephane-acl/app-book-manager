[{"/home/steph/Documents/Projets/book/app-book-manager/src/reportWebVitals.js":"1","/home/steph/Documents/Projets/book/app-book-manager/src/App.js":"2","/home/steph/Documents/Projets/book/app-book-manager/src/index.js":"3","/home/steph/Documents/Projets/book/app-book-manager/src/config.js":"4","/home/steph/Documents/Projets/book/app-book-manager/src/pages/HomePage.jsx":"5","/home/steph/Documents/Projets/book/app-book-manager/src/components/NavBar.jsx":"6","/home/steph/Documents/Projets/book/app-book-manager/src/pages/BooksPage.jsx":"7","/home/steph/Documents/Projets/book/app-book-manager/src/components/ButtonActive.jsx":"8","/home/steph/Documents/Projets/book/app-book-manager/src/components/Pagination.jsx":"9","/home/steph/Documents/Projets/book/app-book-manager/src/services/API.js":"10","/home/steph/Documents/Projets/book/app-book-manager/src/pages/AuthorsPage.jsx":"11","/home/steph/Documents/Projets/book/app-book-manager/src/pages/LoginPage.jsx":"12","/home/steph/Documents/Projets/book/app-book-manager/src/services/AuthApi.js":"13","/home/steph/Documents/Projets/book/app-book-manager/src/contexts/AuthContext.js":"14"},{"size":362,"mtime":1610656268776,"results":"15","hashOfConfig":"16"},{"size":1365,"mtime":1611327979262,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1610656268776,"results":"18","hashOfConfig":"16"},{"size":261,"mtime":1611253364744,"results":"19","hashOfConfig":"16"},{"size":659,"mtime":1610888321461,"results":"20","hashOfConfig":"16"},{"size":3248,"mtime":1611327295286,"results":"21","hashOfConfig":"16"},{"size":5192,"mtime":1611251044725,"results":"22","hashOfConfig":"16"},{"size":294,"mtime":1610997025506,"results":"23","hashOfConfig":"16"},{"size":1568,"mtime":1611144713227,"results":"24","hashOfConfig":"16"},{"size":585,"mtime":1611315105394,"results":"25","hashOfConfig":"16"},{"size":3628,"mtime":1611251555332,"results":"26","hashOfConfig":"16"},{"size":2372,"mtime":1611327679523,"results":"27","hashOfConfig":"16"},{"size":1794,"mtime":1611328175473,"results":"28","hashOfConfig":"16"},{"size":134,"mtime":1611326794730,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"yf5m59",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/steph/Documents/Projets/book/app-book-manager/src/reportWebVitals.js",[],["64","65"],"/home/steph/Documents/Projets/book/app-book-manager/src/App.js",[],"/home/steph/Documents/Projets/book/app-book-manager/src/index.js",[],["66","67"],"/home/steph/Documents/Projets/book/app-book-manager/src/config.js",[],"/home/steph/Documents/Projets/book/app-book-manager/src/pages/HomePage.jsx",["68"],"import React from \"react\";\n\nconst HomePage = (props) => {\n\nreturn (\n    <div className=\"jumbotron\">\n        <h1 className=\"display-3\">Hello, world!</h1>\n        <p className=\"lead\">This is a simple hero unit, a simple jumbotron-style component for calling extra attention\n            to featured content or information.</p>\n        <hr className=\"my-4\"/>\n            <p>It uses utility classes for typography and spacing to space content out within the larger container.</p>\n            <p className=\"lead\">\n                <a className=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\">Learn more</a>\n            </p>\n    </div>\n);\n\n}\n\nexport default HomePage;","/home/steph/Documents/Projets/book/app-book-manager/src/components/NavBar.jsx",["69"],"/home/steph/Documents/Projets/book/app-book-manager/src/pages/BooksPage.jsx",["70"],"import React, {useEffect, useState} from 'react';\nimport ButtonActive from \"../components/ButtonActive\";\nimport Pagination from \"../components/Pagination\";\nimport API from \"../services/API\";\nimport moment from 'moment';\n\nconst BooksPage = () => {\n\n    const [books, setBooks] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [search, setSearch] = useState(\"\");\n\n    // Permet d'aller récupérer les livres depuis notre api\n    const fetchBooks = async () => {\n\n        try {\n            const data = await API.findAllBooks()\n            setBooks(data);\n        } catch (error) {\n            console.log(error.response);\n        }\n    };\n\n    // Au chargement du composant on va chercher les livres\n    useEffect(() => {\n        fetchBooks();\n    }, []);\n\n    //  useEffect(() => {\n    //      console.log(books);\n    //  }, [books]);\n\n    //  const handleChange = (book) => {\n\n    //      const newList = books.map((item) => {\n    //          if (item.id === book.id) {\n    //              let updatedItem = {\n    //                  ...item,\n    //                  isAvailable: !item.isAvailable,\n    //              }\n\n    //              axios.put(BOOKS + \"/\" + book.id, updatedItem).then(response => response.data['hydra:member'])\n    //                  .then(data => setBooks(data['hydra:member']))\n    //                  .catch(error => console.log(error.response));\n\n    //              return updatedItem;\n    //          }\n    //          return item;\n    //      });\n\n    //      setBooks(newList);\n\n\n    // setBooks({\n    //     books: {\n    //         isAvailable: !books.isAvailable\n    //     }\n    // });\n    // }\n\n    // Gestion du changement de page\n    const handlePageChange = page => setCurrentPage(page);\n\n    // Gestion de la recherche\n    const handleSearch = (event) => {\n        setSearch(event.currentTarget.value);\n        setCurrentPage(1);\n    }\n\n    // Filtrage des livres en fonction de la recherche\n    const filteredBooks = books.filter(b =>\n        b.title.toLowerCase().includes(search.toLowerCase()) ||\n        b.author?.firstName.toLowerCase().includes(search.toLowerCase()) ||\n        b.author?.lastName.toLowerCase().includes(search.toLowerCase())\n    );\n\n    // Pagination des données\n    const itemsPerPage = 10;\n    const paginatedBooks = Pagination.getData(filteredBooks, currentPage, itemsPerPage);\n\n    // Formate la date\n    const formatDate = (str) => moment(str).format('DD/MM/YYYY');\n\n    return (\n        <>\n            <h1>Liste des livres</h1>\n\n            <div className=\"form-group\">\n                <input type='text' onChange={handleSearch} value={search} className=\"form-control\"\n                       placeholder=\"Rechercher ...\"/>\n            </div>\n\n            <table className=\"table table-hover\">\n                <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>Image</th>\n                    <th>Titre</th>\n                    <th>Langue</th>\n                    <th>Description</th>\n                    <th className=\"text-center\">Nombre de Pages</th>\n                    <th>Auteur</th>\n                    <th className=\"text-center\">Date de Publication</th>\n                    <th className=\"text-center\">Disponible</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                {paginatedBooks.map(book =>\n                    <tr key={book.id}>\n                        <td>{book.id}</td>\n                        <td><img src={book.image} alt={book.title} height=\"120px\"/></td>\n                        <td>\n                            <a href=\"#\">{book.title}</a>\n                        </td>\n                        <td>{book.language}</td>\n                        <td>{book.description}</td>\n                        <td className=\"text-center\">\n                            <span className=\"badge badge-primary p-2\">{book.nbrPages}</span>\n                        </td>\n                        <td className=\"text-center\">{book.author?.firstName} {book.author?.lastName}</td>\n                        <td className=\"text-center\">{formatDate(book.dateOfPublication)}</td>\n                        <td className=\"text-center\">\n                            {\n                                book.isAvailable ? (\n                                    <img src=\"static/img/icons/check.svg\" alt=\"check\" height=\"35px\"/>\n                                ) : (\n                                    <img src=\"static/img/icons/uncheck.svg\" alt=\"uncheck\" height=\"35px\"/>\n                                )\n                            }\n                        </td>\n                        <td>\n                            <ButtonActive active={book.isAvailable}/>\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n\n            {\n                itemsPerPage < filteredBooks.length &&\n                <Pagination currentPage={currentPage} itemsPerPage={itemsPerPage} length={filteredBooks.length}\n                            onPageChanged={handlePageChange}\n                />\n            }\n        </>\n    );\n}\n\nexport default BooksPage;","/home/steph/Documents/Projets/book/app-book-manager/src/components/ButtonActive.jsx",[],"/home/steph/Documents/Projets/book/app-book-manager/src/components/Pagination.jsx",[],"/home/steph/Documents/Projets/book/app-book-manager/src/services/API.js",[],"/home/steph/Documents/Projets/book/app-book-manager/src/pages/AuthorsPage.jsx",["71"],"import React, {useEffect, useState} from 'react';\nimport Pagination from \"../components/Pagination\";\nimport moment from 'moment';\nimport API from \"../services/API\";\n\nconst AuthorsPage = (props) => {\n\n    const [authors, setAuthors] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [search, setSearch] = useState(\"\");\n    const itemsPerPage = 10;\n\n    // Récupération des auteurs auprès de l'API\n    const fetchAuthors = async () => {\n        try {\n            const data = await API.findAllAuthors();\n            setAuthors(data);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    //Charger les auteurs au chargement du composant\n    useEffect(() => {\n        fetchAuthors();\n    }, []);\n\n\n    // Gestion du changement de page\n    const handlePageChange = page => setCurrentPage(page);\n\n    // Gestion de la recherche\n    const handleSearch = (event) => {\n        setSearch(event.currentTarget.value);\n        setCurrentPage(1);\n    }\n\n    // Gestion de la suppression\n    const handleDelete = async (id) => {\n        const originalAuthors = [...authors];\n\n        setAuthors(authors.filter(author => author.id !== id));\n\n        try {\n            await API.delete(id);\n        } catch (error) {\n            console.log(error.response);\n            setAuthors(originalAuthors);\n        }\n    }\n\n    //Gestion du format de date\n    const formatDate = (str) => moment(str).format('DD/MM/YYYY');\n\n    // Filtrage des livres en fonction de la recherche\n    const filteredAuthors = authors.filter(a =>\n        a.firstName.toLowerCase().includes(search.toLowerCase()) ||\n        a.lastName.toLowerCase().includes(search.toLowerCase()) ||\n        a.nationality.toLowerCase().includes(search.toLowerCase())\n    );\n\n    // Pagination des données\n    const paginatedAuthors = Pagination.getData(filteredAuthors, currentPage, itemsPerPage);\n\n    return (\n        <>\n            <h1>Liste des Auteurs</h1>\n\n            <div className=\"form-group\">\n                <input type='text' onChange={handleSearch} value={search} className=\"form-control\"\n                       placeholder=\"Rechercher ...\"/>\n            </div>\n\n            <table className=\"table table-hover\">\n                <thead>\n                <tr>\n                    <th>Id</th>\n                    <th>Nom</th>\n                    <th>Prénom</th>\n                    <th>Date de naissance</th>\n                    <th>Nationnalité</th>\n                    <th>action</th>\n                </tr>\n                </thead>\n                <tbody>\n                {paginatedAuthors.map(author =>\n                    <tr key={author.id}>\n                        <td>{author.id}</td>\n                        <td>\n                            <a href=\"#\">{author.lastName}</a>\n                        </td>\n                        <td>{author.firstName}</td>\n                        <td>{formatDate(author.dateOfBirth)}</td>\n                        <td>{author.nationality}</td>\n                        <td>\n                            <button>Mettre à jour</button>\n                            <button onClick={() => handleDelete(author.id)}>Supprimer</button>\n                        </td>\n                    </tr>\n                )}\n                </tbody>\n            </table>\n            {\n                itemsPerPage < filteredAuthors.length &&\n                <Pagination currentPage={currentPage} itemsPerPage={itemsPerPage} length={filteredAuthors.length}\n                            onPageChanged={handlePageChange}\n                />\n            }\n        </>\n    );\n}\n\nexport default AuthorsPage;","/home/steph/Documents/Projets/book/app-book-manager/src/pages/LoginPage.jsx",[],["72","73"],"/home/steph/Documents/Projets/book/app-book-manager/src/services/AuthApi.js",[],"/home/steph/Documents/Projets/book/app-book-manager/src/contexts/AuthContext.js",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"78"},{"ruleId":"76","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":13,"column":17,"nodeType":"82","endLine":13,"endColumn":78},{"ruleId":"80","severity":1,"message":"81","line":36,"column":25,"nodeType":"82","endLine":37,"endColumn":71},{"ruleId":"80","severity":1,"message":"81","line":114,"column":29,"nodeType":"82","endLine":114,"endColumn":41},{"ruleId":"80","severity":1,"message":"81","line":90,"column":29,"nodeType":"82","endLine":90,"endColumn":41},{"ruleId":"74","replacedBy":"83"},{"ruleId":"76","replacedBy":"84"},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],["85"],["86"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["85"],["86"],"no-global-assign","no-unsafe-negation"]